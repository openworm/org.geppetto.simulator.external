TITLE Mod file for component: Component(id=Ca_pyr type=ionChannelHH)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.4
         org.neuroml.model   v1.4.4
         jLEMS               v0.9.8.4

ENDCOMMENT

NEURON {
    SUFFIX Ca_pyr
    USEION ca WRITE ica VALENCE 2 ? Assuming valence = 2 (Ca ion); TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE conductance                       : parameter
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE m_instances                       : parameter
    
    RANGE m_alpha                           : exposure
    
    RANGE m_beta                            : exposure
    
    RANGE m_tau                             : exposure
    
    RANGE m_inf                             : exposure
    
    RANGE m_rateScale                       : exposure
    
    RANGE m_fcond                           : exposure
    RANGE m_reverseRate_rate                : parameter
    RANGE m_reverseRate_midpoint            : parameter
    RANGE m_reverseRate_scale               : parameter
    
    RANGE m_reverseRate_r                   : exposure
    RANGE m_forwardRate_rate                : parameter
    RANGE m_forwardRate_midpoint            : parameter
    RANGE m_forwardRate_scale               : parameter
    
    RANGE m_forwardRate_r                   : exposure
    RANGE h_instances                       : parameter
    
    RANGE h_tau                             : exposure
    
    RANGE h_inf                             : exposure
    
    RANGE h_rateScale                       : exposure
    
    RANGE h_fcond                           : exposure
    RANGE h_timeCourse_TIME_SCALE           : parameter
    RANGE h_timeCourse_VOLT_SCALE           : parameter
    
    RANGE h_timeCourse_t                    : exposure
    RANGE h_steadyState_TIME_SCALE          : parameter
    RANGE h_steadyState_VOLT_SCALE          : parameter
    
    RANGE h_steadyState_x                   : exposure
    RANGE m_reverseRate_x                   : derived variable
    RANGE h_timeCourse_V                    : derived variable
    RANGE h_steadyState_V                   : derived variable
    RANGE h_tauUnscaled                     : derived variable
    RANGE conductanceScale                  : derived variable
    RANGE fopenHHrates                      : derived variable
    RANGE fopenHHtauInf                     : derived variable
    RANGE fopenHHratesTau                   : derived variable
    RANGE fopenHHratesInf                   : derived variable
    RANGE fopenHHratesTauInf                : derived variable
    RANGE fopenHHInstantaneous              : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    conductance = 1.0E-5 (uS)
    m_instances = 2 
    m_reverseRate_rate = 0.1 (kHz)
    m_reverseRate_midpoint = -8.9 (mV)
    m_reverseRate_scale = -5 (mV)
    m_forwardRate_rate = 1.6 (kHz)
    m_forwardRate_midpoint = 5 (mV)
    m_forwardRate_scale = 13.89 (mV)
    h_instances = 1 
    h_timeCourse_TIME_SCALE = 1000 (ms)
    h_timeCourse_VOLT_SCALE = 1000 (mV)
    h_steadyState_TIME_SCALE = 1000 (ms)
    h_steadyState_VOLT_SCALE = 1000 (mV)
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    eca (mV)
    ica (mA/cm2)
    
    
    m_reverseRate_x                        : derived variable
    
    m_reverseRate_r (kHz)                  : conditional derived var...
    
    m_forwardRate_r (kHz)                  : derived variable
    
    m_rateScale                            : derived variable
    
    m_alpha (kHz)                          : derived variable
    
    m_beta (kHz)                           : derived variable
    
    m_fcond                                : derived variable
    
    m_inf                                  : derived variable
    
    m_tau (ms)                             : derived variable
    
    h_timeCourse_V                         : derived variable
    
    h_timeCourse_t (ms)                    : derived variable
    
    h_steadyState_V                        : derived variable
    
    h_steadyState_x                        : conditional derived var...
    
    h_rateScale                            : derived variable
    
    h_fcond                                : derived variable
    
    h_inf                                  : derived variable
    
    h_tauUnscaled (ms)                     : derived variable
    
    h_tau (ms)                             : derived variable
    
    conductanceScale                       : derived variable
    
    fopenHHrates                           : derived variable
    
    fopenHHtauInf                          : derived variable
    
    fopenHHratesTau                        : derived variable
    
    fopenHHratesInf                        : derived variable
    
    fopenHHratesTauInf                     : derived variable
    
    fopenHHInstantaneous                   : derived variable
    
    fopen                                  : derived variable
    
    g (uS)                                 : derived variable
    rate_m_q (/ms)
    rate_h_q (/ms)
    
}

STATE {
    m_q  
    h_q  
    
}

INITIAL {
    eca = 80.0
    
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    m_q = m_inf
    
    h_q = h_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=Ca_pyr type=ionChannelHH), from conductanceScaling; null
    ? Path not present in component, using factor: 1
    
    conductanceScale = 1 
    
    ? DerivedVariable is based on path: gatesHHrates[*]/fcond, on: Component(id=Ca_pyr type=ionChannelHH), from gatesHHrates; Component(id=m type=gateHHrates)
    ? multiply applied to all instances of fcond in: <gatesHHrates> ([Component(id=m type=gateHHrates)]))
    fopenHHrates = m_fcond ? path based
    
    ? DerivedVariable is based on path: gatesHHtauInf[*]/fcond, on: Component(id=Ca_pyr type=ionChannelHH), from gatesHHtauInf; Component(id=h type=gateHHtauInf)
    ? multiply applied to all instances of fcond in: <gatesHHtauInf> ([Component(id=h type=gateHHtauInf)]))
    fopenHHtauInf = h_fcond ? path based
    
    ? DerivedVariable is based on path: gatesHHratesTau[*]/fcond, on: Component(id=Ca_pyr type=ionChannelHH), from gatesHHratesTau; null
    ? Path not present in component, using factor: 1
    
    fopenHHratesTau = 1 
    
    ? DerivedVariable is based on path: gatesHHratesInf[*]/fcond, on: Component(id=Ca_pyr type=ionChannelHH), from gatesHHratesInf; null
    ? Path not present in component, using factor: 1
    
    fopenHHratesInf = 1 
    
    ? DerivedVariable is based on path: gatesHHratesTauInf[*]/fcond, on: Component(id=Ca_pyr type=ionChannelHH), from gatesHHratesTauInf; null
    ? Path not present in component, using factor: 1
    
    fopenHHratesTauInf = 1 
    
    ? DerivedVariable is based on path: gateHHInstantaneous[*]/fcond, on: Component(id=Ca_pyr type=ionChannelHH), from gateHHInstantaneous; null
    ? Path not present in component, using factor: 1
    
    fopenHHInstantaneous = 1 
    
    fopen = conductanceScale  *  fopenHHrates  *  fopenHHtauInf  *  fopenHHratesTau  *  fopenHHratesInf  *  fopenHHratesTauInf  *  fopenHHInstantaneous ? evaluable
    g = conductance  *  fopen ? evaluable
    gion = gmax * fopen 
    
    ica = gion * (v - eca)
    
}

DERIVATIVE states {
    rates()
    m_q' = rate_m_q 
    h_q' = rate_h_q 
    
}

PROCEDURE rates() {
    
    m_reverseRate_x = (v -  m_reverseRate_midpoint ) /  m_reverseRate_scale ? evaluable
    if (m_reverseRate_x  != 0)  { 
        m_reverseRate_r = m_reverseRate_rate  *  m_reverseRate_x  / (1 - exp(0 -  m_reverseRate_x )) ? evaluable cdv
    } else if (m_reverseRate_x  == 0)  { 
        m_reverseRate_r = m_reverseRate_rate ? evaluable cdv
    }
    
    m_forwardRate_r = m_forwardRate_rate  / (1 + exp(0 - (v -  m_forwardRate_midpoint )/ m_forwardRate_scale )) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=m type=gateHHrates), from q10Settings; null
    ? Path not present in component, using factor: 1
    
    m_rateScale = 1 
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=m type=gateHHrates), from forwardRate; Component(id=null type=HHSigmoidRate)
    m_alpha = m_forwardRate_r ? path based
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=m type=gateHHrates), from reverseRate; Component(id=null type=HHExpLinearRate)
    m_beta = m_reverseRate_r ? path based
    
    m_fcond = m_q ^ m_instances ? evaluable
    m_inf = m_alpha /( m_alpha + m_beta ) ? evaluable
    m_tau = 1/(( m_alpha + m_beta ) *  m_rateScale ) ? evaluable
    h_timeCourse_V = v /  h_timeCourse_VOLT_SCALE ? evaluable
    h_timeCourse_t = 0.2  *  h_timeCourse_TIME_SCALE ? evaluable
    h_steadyState_V = v /  h_steadyState_VOLT_SCALE ? evaluable
    if (h_steadyState_V   > ( -0.06 ))  { 
        h_steadyState_x = (exp (-50*( h_steadyState_V  + 0.06))) ? evaluable cdv
    } else  { 
        h_steadyState_x = 1 ? evaluable cdv
    }
    
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=h type=gateHHtauInf), from q10Settings; null
    ? Path not present in component, using factor: 1
    
    h_rateScale = 1 
    
    h_fcond = h_q ^ h_instances ? evaluable
    ? DerivedVariable is based on path: steadyState/x, on: Component(id=h type=gateHHtauInf), from steadyState; Component(id=null type=Ca_pyr_h_inf_inf)
    h_inf = h_steadyState_x ? path based
    
    ? DerivedVariable is based on path: timeCourse/t, on: Component(id=h type=gateHHtauInf), from timeCourse; Component(id=null type=Ca_pyr_h_tau_tau)
    h_tauUnscaled = h_timeCourse_t ? path based
    
    h_tau = h_tauUnscaled  /  h_rateScale ? evaluable
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    rate_m_q = ( m_inf  -  m_q ) /  m_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    rate_h_q = ( h_inf  -  h_q ) /  h_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
}

