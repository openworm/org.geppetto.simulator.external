'''
Neuron simulator export for:

Components:
    passive (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    na (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    k (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    hhcell (Type: cell)
    pulseGen1 (Type: pulseGenerator:  delay=0.0 (SI time) duration=1.0E8 (SI time) amplitude=8.000000000000001E-11 (SI current))
    net1 (Type: network)
    sim1 (Type: Simulation:  length=0.3 (SI time) step=5.0E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.2
         org.neuroml.model   v1.4.2
         jLEMS               v0.9.7.3

'''

import neuron
h = neuron.h
h.load_file("stdlib.hoc")

h.load_file("stdgui.hoc")

h("objref p")
h("p = new PythonObject()")

# Adding simulation Component(id=sim1 type=Simulation) of network/component: net1 (Type: network)
print("Population hhpop contains 1 instance(s) of component: hhcell of type: cell")

h.load_file("hhcell.hoc")
a_hhpop = []
h("n_hhpop = 1")
h("objectvar a_hhpop[n_hhpop]")
for i in range(int(h.n_hhpop)):
    h("a_hhpop[%i] = new hhcell()"%i)
    h("access a_hhpop[%i].soma"%i)

h("proc initialiseV_hhpop() { for i = 0, n_hhpop-1 { a_hhpop[i].set_initial_v() } }")
h("objref fih_hhpop")
h('{fih_hhpop = new FInitializeHandler(0, "initialiseV_hhpop()")}')

h("proc initialiseIons_hhpop() { for i = 0, n_hhpop-1 { a_hhpop[i].set_initial_ion_properties() } }")
h("objref fih_ion_hhpop")
h('{fih_ion_hhpop = new FInitializeHandler(1, "initialiseIons_hhpop()")}')

# Adding input: Component(id=null type=explicitInput)

h("objectvar explicitInput_pulseGen1_hhpop_0_a_hhpop0_soma")
h("a_hhpop[0].soma { explicitInput_pulseGen1_hhpop_0_a_hhpop0_soma = new pulseGen1(0.5) } ")

trec = h.Vector()
trec.record(h._ref_t)

h.tstop = 300

h.dt = 0.05

h.steps_per_ms = 20.0



# File to save: of0
# Column: hhpop[0]/v
h(' objectvar v_v_of0 ')
h(' { v_v_of0 = new Vector() } ')
h(' v_v_of0.record(&a_hhpop[0].soma.v(0.5)) ')
h.v_v_of0.resize((h.tstop * h.steps_per_ms) + 1)

# File to save: time
# Column: time
h(' objectvar v_time ')
h(' { v_time = new Vector() } ')
h(' v_time.record(&t) ')
h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

# File to save: of1
# Column: hhpop[0]/bioPhys1/membraneProperties/naChans/na/m/q
h(' objectvar v_m_of1 ')
h(' { v_m_of1 = new Vector() } ')
h(' v_m_of1.record(&a_hhpop[0].soma.m_q_na(0.5)) ')
h.v_m_of1.resize((h.tstop * h.steps_per_ms) + 1)
# Column: hhpop[0]/bioPhys1/membraneProperties/naChans/na/h/q
h(' objectvar v_h_of1 ')
h(' { v_h_of1 = new Vector() } ')
h(' v_h_of1.record(&a_hhpop[0].soma.h_q_na(0.5)) ')
h.v_h_of1.resize((h.tstop * h.steps_per_ms) + 1)
# Column: hhpop[0]/bioPhys1/membraneProperties/kChans/k/n/q
h(' objectvar v_n_of1 ')
h(' { v_n_of1 = new Vector() } ')
h(' v_n_of1.record(&a_hhpop[0].soma.n_q_k(0.5)) ')
h.v_n_of1.resize((h.tstop * h.steps_per_ms) + 1)



print("Running a simulation of %sms (dt = %sms)" % (h.tstop, h.dt))

h.run()

print("Finished simulation, saving results...")


# File to save: of0
f_of0_f2 = open('results/ex5_v.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_of0_f2.write('%f\t'% (float(h.v_time.get(i))/1000.0)) # Time in first column, save in SI units...
    f_of0_f2.write('%f\t'%(float(h.v_v_of0.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_of0_f2.write("\n")
f_of0_f2.close()
print("Saved data to: results/ex5_v.dat")

# File to save: time
f_time_f2 = open('time.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_time_f2.write('%f'% (float(h.v_time.get(i))/1000.0))  # Save in SI units...
    f_time_f2.write("\n")
f_time_f2.close()
print("Saved data to: time.dat")

# File to save: of1
f_of1_f2 = open('results/ex5_vars.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_of1_f2.write('%f\t'% (float(h.v_time.get(i))/1000.0)) # Time in first column, save in SI units...
    f_of1_f2.write('%f\t'%(float(h.v_m_of1.get(i)))) # Saving as SI, variable has dim: none
    f_of1_f2.write('%f\t'%(float(h.v_h_of1.get(i)))) # Saving as SI, variable has dim: none
    f_of1_f2.write('%f\t'%(float(h.v_n_of1.get(i)))) # Saving as SI, variable has dim: none
    f_of1_f2.write("\n")
f_of1_f2.close()
print("Saved data to: results/ex5_vars.dat")

print("Done")

quit()
