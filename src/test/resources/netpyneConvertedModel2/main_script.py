'''
NETPYNE simulator compliant export for:

Components:
    RS (Type: izhikevich2007Cell:  v0=-0.06 (SI voltage) k=7.0E-7 (SI conductance_per_voltage) vr=-0.06 (SI voltage) vt=-0.04 (SI voltage) vpeak=0.035 (SI voltage) a=30.0 (SI per_time) b=-2.0E-9 (SI conductance) c=-0.05 (SI voltage) d=1.0E-10 (SI current) C=1.0E-10 (SI capacitance))
    null (Type: notes)
    null (Type: property)
    syn0 (Type: expTwoSynapse:  tauRise=5.0E-4 (SI time) tauDecay=0.01 (SI time) peakTime=0.0015767011966073639 (SI time) waveformFactor=1.232399909181873 (dimensionless) gbase=1.0E-9 (SI conductance) erev=0.0 (SI voltage))
    syn1 (Type: expTwoSynapse:  tauRise=0.001 (SI time) tauDecay=0.015 (SI time) peakTime=0.0029014823583237968 (SI time) waveformFactor=1.3000789959133998 (dimensionless) gbase=2.0E-9 (SI conductance) erev=0.0 (SI voltage))
    poissonFiringSyn (Type: poissonFiringSynapse:  averageRate=150.0 (SI per_time) averageIsi=0.006666666666666667 (SI time))
    SpikingNet (Type: networkWithTemperature:  temperature=305.15 (SI temperature))
    Sim_SpikingNet (Type: Simulation:  length=1.0 (SI time) step=1.0E-5 (SI time))


    This NETPYNE file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.2
         org.neuroml.model   v1.5.2
         jLEMS               v0.9.8.9

'''
# Main NetPyNE script for: SpikingNet

# See https://github.com/Neurosim-lab/netpyne

from netpyne import specs  # import netpyne specs module
from netpyne import sim    # import netpyne sim module

from neuron import h

import sys


###############################################################################
# NETWORK PARAMETERS
###############################################################################

nml2_file_name = 'SpikingNet.net.nml'

###############################################################################
# SIMULATION PARAMETERS
###############################################################################

simConfig = specs.SimConfig()   # object of class SimConfig to store the simulation configuration

# Simulation parameters
simConfig.duration = simConfig.tstop = 1000.0 # Duration of the simulation, in ms
simConfig.dt = 0.01 # Internal integration timestep to use

# Seeds for randomizers (connectivity, input stimulation and cell locations)
# Note: locations and connections should be fully specified by the structure of the NeuroML,
# so seeds for conn & loc shouldn't affect networks structure/behaviour
simConfig.seeds = {'conn': 0, 'stim': 12345, 'loc': 0} 

simConfig.createNEURONObj = 1  # create HOC objects when instantiating network
simConfig.createPyStruct = 1  # create Python structure (simulator-independent) when instantiating network
simConfig.verbose = False  # show detailed messages 
simConfig.hParams['celsius'] = (305.15 - 273.15)

# Recording 
simConfig.recordCells = ['all']  
simConfig.recordTraces = {}

# For saving to file: Sim_SpikingNet.pop_pre.v.dat (ref: Volts_file__pop_pre)
# Column: v_pop_pre_0_RS_v: Pop: pop_pre; cell: 0; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_0_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':0}}
# Column: v_pop_pre_1_RS_v: Pop: pop_pre; cell: 1; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_1_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':1}}
# Column: v_pop_pre_2_RS_v: Pop: pop_pre; cell: 2; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_2_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':2}}
# Column: v_pop_pre_3_RS_v: Pop: pop_pre; cell: 3; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_3_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':3}}
# Column: v_pop_pre_4_RS_v: Pop: pop_pre; cell: 4; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_4_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':4}}
# Column: v_pop_pre_5_RS_v: Pop: pop_pre; cell: 5; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_5_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':5}}
# Column: v_pop_pre_6_RS_v: Pop: pop_pre; cell: 6; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_6_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':6}}
# Column: v_pop_pre_7_RS_v: Pop: pop_pre; cell: 7; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_7_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':7}}
# Column: v_pop_pre_8_RS_v: Pop: pop_pre; cell: 8; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_8_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':8}}
# Column: v_pop_pre_9_RS_v: Pop: pop_pre; cell: 9; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_pre_pop_pre_9_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_pre','cellLabel':9}}
# For saving to file: Sim_SpikingNet.pop_post.v.dat (ref: Volts_file__pop_post)
# Column: v_pop_post_0_RS_v: Pop: pop_post; cell: 0; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_0_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':0}}
# Column: v_pop_post_1_RS_v: Pop: pop_post; cell: 1; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_1_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':1}}
# Column: v_pop_post_2_RS_v: Pop: pop_post; cell: 2; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_2_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':2}}
# Column: v_pop_post_3_RS_v: Pop: pop_post; cell: 3; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_3_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':3}}
# Column: v_pop_post_4_RS_v: Pop: pop_post; cell: 4; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_4_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':4}}
# Column: v_pop_post_5_RS_v: Pop: pop_post; cell: 5; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_5_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':5}}
# Column: v_pop_post_6_RS_v: Pop: pop_post; cell: 6; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_6_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':6}}
# Column: v_pop_post_7_RS_v: Pop: pop_post; cell: 7; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_7_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':7}}
# Column: v_pop_post_8_RS_v: Pop: pop_post; cell: 8; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_8_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':8}}
# Column: v_pop_post_9_RS_v: Pop: pop_post; cell: 9; segment id: $oc.segment_id; segment name: soma; Neuron loc: soma(0.5); value: v (v)
simConfig.recordTraces['Volts_file__pop_post_pop_post_9_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pop_post','cellLabel':9}}


simConfig.plotCells = ['all']


simConfig.recordStim = True  # record spikes of cell stims
simConfig.recordStep = simConfig.dt # Step size in ms to save data (eg. V traces, LFP, etc)



# Analysis and plotting 
simConfig.plotRaster = True # Whether or not to plot a raster
simConfig.plotLFPSpectrum = False # plot power spectral density
simConfig.maxspikestoplot = 3e8 # Maximum number of spikes to plot
simConfig.plotConn = False # whether to plot conn matrix
simConfig.plotWeightChanges = False # whether to plot weight changes (shown in conn matrix)
#simConfig.plot3dArch = True # plot 3d architecture

# Saving
simConfig.filename = 'SpikingNet.txt'  # Set file output name
simConfig.saveFileStep = simConfig.dt # step size in ms to save data to disk
# simConfig.saveDat = True # save to dat file


###############################################################################
# IMPORT & RUN
###############################################################################

print("Running a NetPyNE based simulation for %sms (dt: %sms) at %s degC"%(simConfig.duration, simConfig.dt, h.celsius))

gids = sim.importNeuroML2SimulateAnalyze(nml2_file_name,simConfig)

print("Finished simulation")


###############################################################################
#   Saving data (this ensures the data gets saved in the format/files 
#   as specified in the LEMS <Simulation> element)
###############################################################################


if sim.rank==0: 
    print("Saving to file: Sim_SpikingNet.pop_pre.v.dat (ref: Volts_file__pop_pre)")

 
    # Column: t
    col_Volts_file__pop_pre_t = [i*simConfig.dt for i in range(int(simConfig.duration/simConfig.dt))]

    # Column: v_pop_pre_0_RS_v: Pop: pop_pre; cell: 0; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_0_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_0_soma_v']['cell_%s'%gids['pop_pre'][0]]

    # Column: v_pop_pre_1_RS_v: Pop: pop_pre; cell: 1; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_1_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_1_soma_v']['cell_%s'%gids['pop_pre'][1]]

    # Column: v_pop_pre_2_RS_v: Pop: pop_pre; cell: 2; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_2_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_2_soma_v']['cell_%s'%gids['pop_pre'][2]]

    # Column: v_pop_pre_3_RS_v: Pop: pop_pre; cell: 3; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_3_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_3_soma_v']['cell_%s'%gids['pop_pre'][3]]

    # Column: v_pop_pre_4_RS_v: Pop: pop_pre; cell: 4; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_4_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_4_soma_v']['cell_%s'%gids['pop_pre'][4]]

    # Column: v_pop_pre_5_RS_v: Pop: pop_pre; cell: 5; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_5_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_5_soma_v']['cell_%s'%gids['pop_pre'][5]]

    # Column: v_pop_pre_6_RS_v: Pop: pop_pre; cell: 6; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_6_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_6_soma_v']['cell_%s'%gids['pop_pre'][6]]

    # Column: v_pop_pre_7_RS_v: Pop: pop_pre; cell: 7; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_7_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_7_soma_v']['cell_%s'%gids['pop_pre'][7]]

    # Column: v_pop_pre_8_RS_v: Pop: pop_pre; cell: 8; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_8_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_8_soma_v']['cell_%s'%gids['pop_pre'][8]]

    # Column: v_pop_pre_9_RS_v: Pop: pop_pre; cell: 9; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_pre_v_pop_pre_9_RS_v = sim.allSimData['Volts_file__pop_pre_pop_pre_9_soma_v']['cell_%s'%gids['pop_pre'][9]]

    dat_file_Volts_file__pop_pre = open('Sim_SpikingNet.pop_pre.v.dat', 'w')
    for i in range(len(col_Volts_file__pop_pre_t)):
        dat_file_Volts_file__pop_pre.write( '%s\t'%(col_Volts_file__pop_pre_t[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_0_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_1_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_2_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_3_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_4_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_5_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_6_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_7_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_8_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_pre_v_pop_pre_9_RS_v[i]/1000.0) +  '\n')
    dat_file_Volts_file__pop_pre.close()

    print("Saving to file: Sim_SpikingNet.pop_post.v.dat (ref: Volts_file__pop_post)")

 
    # Column: t
    col_Volts_file__pop_post_t = [i*simConfig.dt for i in range(int(simConfig.duration/simConfig.dt))]

    # Column: v_pop_post_0_RS_v: Pop: pop_post; cell: 0; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_0_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_0_soma_v']['cell_%s'%gids['pop_post'][0]]

    # Column: v_pop_post_1_RS_v: Pop: pop_post; cell: 1; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_1_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_1_soma_v']['cell_%s'%gids['pop_post'][1]]

    # Column: v_pop_post_2_RS_v: Pop: pop_post; cell: 2; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_2_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_2_soma_v']['cell_%s'%gids['pop_post'][2]]

    # Column: v_pop_post_3_RS_v: Pop: pop_post; cell: 3; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_3_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_3_soma_v']['cell_%s'%gids['pop_post'][3]]

    # Column: v_pop_post_4_RS_v: Pop: pop_post; cell: 4; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_4_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_4_soma_v']['cell_%s'%gids['pop_post'][4]]

    # Column: v_pop_post_5_RS_v: Pop: pop_post; cell: 5; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_5_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_5_soma_v']['cell_%s'%gids['pop_post'][5]]

    # Column: v_pop_post_6_RS_v: Pop: pop_post; cell: 6; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_6_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_6_soma_v']['cell_%s'%gids['pop_post'][6]]

    # Column: v_pop_post_7_RS_v: Pop: pop_post; cell: 7; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_7_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_7_soma_v']['cell_%s'%gids['pop_post'][7]]

    # Column: v_pop_post_8_RS_v: Pop: pop_post; cell: 8; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_8_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_8_soma_v']['cell_%s'%gids['pop_post'][8]]

    # Column: v_pop_post_9_RS_v: Pop: pop_post; cell: 9; segment id: $oc.segment_id; segment name: soma; value: v
    col_Volts_file__pop_post_v_pop_post_9_RS_v = sim.allSimData['Volts_file__pop_post_pop_post_9_soma_v']['cell_%s'%gids['pop_post'][9]]

    dat_file_Volts_file__pop_post = open('Sim_SpikingNet.pop_post.v.dat', 'w')
    for i in range(len(col_Volts_file__pop_post_t)):
        dat_file_Volts_file__pop_post.write( '%s\t'%(col_Volts_file__pop_post_t[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_0_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_1_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_2_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_3_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_4_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_5_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_6_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_7_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_8_RS_v[i]/1000.0) +  '%s\t'%(col_Volts_file__pop_post_v_pop_post_9_RS_v[i]/1000.0) +  '\n')
    dat_file_Volts_file__pop_post.close()


    print("Saved all data.")

if '-nogui' in sys.argv:
    quit()
